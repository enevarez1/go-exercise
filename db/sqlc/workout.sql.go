// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: workout.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO Workout (
    workout_name,
    workout_type,
    user_id
) VALUES (
    $1, $2, $3
)
RETURNING id, workout_name, workout_type, user_id
`

type CreateWorkoutParams struct {
	WorkoutName string   `json:"workout_name"`
	WorkoutType []string `json:"workout_type"`
	UserID      string   `json:"user_id"`
}

func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, createWorkout, arg.WorkoutName, pq.Array(arg.WorkoutType), arg.UserID)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.WorkoutName,
		pq.Array(&i.WorkoutType),
		&i.UserID,
	)
	return i, err
}

const deleteWorkout = `-- name: DeleteWorkout :exec
DELETE FROM Workout WHERE id = $1
`

func (q *Queries) DeleteWorkout(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWorkout, id)
	return err
}

const getWorkoutName = `-- name: GetWorkoutName :one
SELECT id, workout_name, workout_type, user_id FROM Workout 
    WHERE user_id = $1 AND workout_name = $2
`

type GetWorkoutNameParams struct {
	UserID      string `json:"user_id"`
	WorkoutName string `json:"workout_name"`
}

func (q *Queries) GetWorkoutName(ctx context.Context, arg GetWorkoutNameParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, getWorkoutName, arg.UserID, arg.WorkoutName)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.WorkoutName,
		pq.Array(&i.WorkoutType),
		&i.UserID,
	)
	return i, err
}

const getWorkouts = `-- name: GetWorkouts :many
SELECT id, workout_name, workout_type, user_id FROM Workout WHERE user_id = $1
`

func (q *Queries) GetWorkouts(ctx context.Context, userID string) ([]Workout, error) {
	rows, err := q.db.QueryContext(ctx, getWorkouts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.WorkoutName,
			pq.Array(&i.WorkoutType),
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkout = `-- name: UpdateWorkout :exec
UPDATE Workout
SET workout_name = $1,
    workout_type = $2
WHERE id = $3
`

type UpdateWorkoutParams struct {
	WorkoutName string   `json:"workout_name"`
	WorkoutType []string `json:"workout_type"`
	ID          int32    `json:"id"`
}

func (q *Queries) UpdateWorkout(ctx context.Context, arg UpdateWorkoutParams) error {
	_, err := q.db.ExecContext(ctx, updateWorkout, arg.WorkoutName, pq.Array(arg.WorkoutType), arg.ID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: exercise_workout_junction.sql

package db

import (
	"context"
)

const createExerWorkJunc = `-- name: CreateExerWorkJunc :one
INSERT INTO Exercise_Workout_Junction (
    exercise_id,
    workout_id,
    user_id
) VALUES (
    $1, $2, $3
) 
RETURNING id, exercise_id, workout_id, user_id
`

type CreateExerWorkJuncParams struct {
	ExerciseID int32 `json:"exercise_id"`
	WorkoutID  int32 `json:"workout_id"`
	UserID     int32 `json:"user_id"`
}

func (q *Queries) CreateExerWorkJunc(ctx context.Context, arg CreateExerWorkJuncParams) (ExerciseWorkoutJunction, error) {
	row := q.db.QueryRowContext(ctx, createExerWorkJunc, arg.ExerciseID, arg.WorkoutID, arg.UserID)
	var i ExerciseWorkoutJunction
	err := row.Scan(
		&i.ID,
		&i.ExerciseID,
		&i.WorkoutID,
		&i.UserID,
	)
	return i, err
}

const deleteExerWorkJunc = `-- name: DeleteExerWorkJunc :exec
DELETE FROM Exercise_Workout_Junction WHERE id = $1
`

func (q *Queries) DeleteExerWorkJunc(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteExerWorkJunc, id)
	return err
}

const updateExerWorkJunc = `-- name: UpdateExerWorkJunc :exec
UPDATE Exercise_Workout_Junction
SET exercise_id = $1,
    workout_id = $2
WHERE id = $3
`

type UpdateExerWorkJuncParams struct {
	ExerciseID int32 `json:"exercise_id"`
	WorkoutID  int32 `json:"workout_id"`
	ID         int32 `json:"id"`
}

func (q *Queries) UpdateExerWorkJunc(ctx context.Context, arg UpdateExerWorkJuncParams) error {
	_, err := q.db.ExecContext(ctx, updateExerWorkJunc, arg.ExerciseID, arg.WorkoutID, arg.ID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: exercise_workout_junction.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const deleteWorkoutJunction = `-- name: DeleteWorkoutJunction :exec
DELETE FROM Exercise_Workout_Junction WHERE junction_id = $1 AND Exercise_Workout_Junction.user_id = $2
`

type DeleteWorkoutJunctionParams struct {
	JunctionID int32  `json:"junction_id"`
	UserID     string `json:"user_id"`
}

func (q *Queries) DeleteWorkoutJunction(ctx context.Context, arg DeleteWorkoutJunctionParams) error {
	_, err := q.db.ExecContext(ctx, deleteWorkoutJunction, arg.JunctionID, arg.UserID)
	return err
}

const getExerWorkJunc = `-- name: GetExerWorkJunc :many
SELECT exercise_name, exercise_type_id, workout_name, workout_type
FROM Exercise_Workout_Junction 
JOIN Exercise ON Exercise.id = Exercise_Workout_Junction.exercise_id
JOIN Workout ON Workout.id = Exercise_Workout_Junction.workout_id
WHERE workout_id = $1 AND Exercise_Workout_Junction.user_id = $2
`

type GetExerWorkJuncParams struct {
	WorkoutID int32  `json:"workout_id"`
	UserID    string `json:"user_id"`
}

type GetExerWorkJuncRow struct {
	ExerciseName   string   `json:"exercise_name"`
	ExerciseTypeID string   `json:"exercise_type_id"`
	WorkoutName    string   `json:"workout_name"`
	WorkoutType    []string `json:"workout_type"`
}

func (q *Queries) GetExerWorkJunc(ctx context.Context, arg GetExerWorkJuncParams) ([]GetExerWorkJuncRow, error) {
	rows, err := q.db.QueryContext(ctx, getExerWorkJunc, arg.WorkoutID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExerWorkJuncRow
	for rows.Next() {
		var i GetExerWorkJuncRow
		if err := rows.Scan(
			&i.ExerciseName,
			&i.ExerciseTypeID,
			&i.WorkoutName,
			pq.Array(&i.WorkoutType),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNewWorkJunc = `-- name: InsertNewWorkJunc :exec
INSERT INTO Exercise_Workout_Junction (
    junction_id,
    exercise_id,
    workout_id,
    user_id
) VALUES ($1, $2, $3, $4)
ON CONFLICT (exercise_id, workout_id, user_id) DO NOTHING
`

type InsertNewWorkJuncParams struct {
	JunctionID int32  `json:"junction_id"`
	ExerciseID int32  `json:"exercise_id"`
	WorkoutID  int32  `json:"workout_id"`
	UserID     string `json:"user_id"`
}

func (q *Queries) InsertNewWorkJunc(ctx context.Context, arg InsertNewWorkJuncParams) error {
	_, err := q.db.ExecContext(ctx, insertNewWorkJunc,
		arg.JunctionID,
		arg.ExerciseID,
		arg.WorkoutID,
		arg.UserID,
	)
	return err
}

const removeOldWorkJunc = `-- name: RemoveOldWorkJunc :exec
DELETE FROM Exercise_Workout_Junction
WHERE workout_id = $1 AND NOT (exercise_id = ANY($2::int[]))
`

type RemoveOldWorkJuncParams struct {
	WorkoutID int32   `json:"workout_id"`
	Column2   []int32 `json:"column_2"`
}

func (q *Queries) RemoveOldWorkJunc(ctx context.Context, arg RemoveOldWorkJuncParams) error {
	_, err := q.db.ExecContext(ctx, removeOldWorkJunc, arg.WorkoutID, pq.Array(arg.Column2))
	return err
}

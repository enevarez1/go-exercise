// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: exercise.sql

package db

import (
	"context"
)

const createExercise = `-- name: CreateExercise :one
INSERT INTO Exercise (
    exercise_name,
    exercise_type_id,
    user_id
) VALUES (
    $1, $2, $3
)
RETURNING id, exercise_name, exercise_type_id, user_id
`

type CreateExerciseParams struct {
	ExerciseName   string `json:"exercise_name"`
	ExerciseTypeID string `json:"exercise_type_id"`
	UserID         string `json:"user_id"`
}

func (q *Queries) CreateExercise(ctx context.Context, arg CreateExerciseParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, createExercise, arg.ExerciseName, arg.ExerciseTypeID, arg.UserID)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.ExerciseName,
		&i.ExerciseTypeID,
		&i.UserID,
	)
	return i, err
}

const deleteExercise = `-- name: DeleteExercise :exec
DELETE from Exercise where id = $1
`

func (q *Queries) DeleteExercise(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteExercise, id)
	return err
}

const gatherExercises = `-- name: GatherExercises :many
SELECT id, exercise_name, exercise_type_id, user_id from Exercise where user_id = $1
`

func (q *Queries) GatherExercises(ctx context.Context, userID string) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, gatherExercises, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.ExerciseName,
			&i.ExerciseTypeID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExercise = `-- name: UpdateExercise :exec
UPDATE Exercise
SET exercise_name = $1,
    exercise_type_id = $2
WHERE id = $3
`

type UpdateExerciseParams struct {
	ExerciseName   string `json:"exercise_name"`
	ExerciseTypeID string `json:"exercise_type_id"`
	ID             int32  `json:"id"`
}

func (q *Queries) UpdateExercise(ctx context.Context, arg UpdateExerciseParams) error {
	_, err := q.db.ExecContext(ctx, updateExercise, arg.ExerciseName, arg.ExerciseTypeID, arg.ID)
	return err
}

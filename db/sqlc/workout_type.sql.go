// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: workout_type.sql

package db

import (
	"context"
)

const createWorkoutType = `-- name: CreateWorkoutType :one
INSERT INTO Workout_Type (
    workout_type
) VALUES (
    $1
)
RETURNING workout_type, user_id
`

func (q *Queries) CreateWorkoutType(ctx context.Context, workoutType string) (WorkoutType, error) {
	row := q.db.QueryRowContext(ctx, createWorkoutType, workoutType)
	var i WorkoutType
	err := row.Scan(&i.WorkoutType, &i.UserID)
	return i, err
}

const deleteWorkoutType = `-- name: DeleteWorkoutType :exec
DELETE from Workout_Type where workout_type = $1
`

func (q *Queries) DeleteWorkoutType(ctx context.Context, workoutType string) error {
	_, err := q.db.ExecContext(ctx, deleteWorkoutType, workoutType)
	return err
}

const getWorkoutTypes = `-- name: GetWorkoutTypes :many
SELECT workout_type, user_id FROM Workout_Type WHERE user_id = $1
`

func (q *Queries) GetWorkoutTypes(ctx context.Context, userID int32) ([]WorkoutType, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutTypes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkoutType
	for rows.Next() {
		var i WorkoutType
		if err := rows.Scan(&i.WorkoutType, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkoutType = `-- name: UpdateWorkoutType :exec
UPDATE Workout_Type
SET workout_type = $1
WHERE workout_type = $2 AND user_id = $3
`

type UpdateWorkoutTypeParams struct {
	WorkoutType   string `json:"workout_type"`
	WorkoutType_2 string `json:"workout_type_2"`
	UserID        int32  `json:"user_id"`
}

func (q *Queries) UpdateWorkoutType(ctx context.Context, arg UpdateWorkoutTypeParams) error {
	_, err := q.db.ExecContext(ctx, updateWorkoutType, arg.WorkoutType, arg.WorkoutType_2, arg.UserID)
	return err
}

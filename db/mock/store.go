// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/enevarez1/go-exercise/db/sqlc (interfaces: Store)

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"

	db "github.com/enevarez1/go-exercise/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateExercise mocks base method.
func (m *MockStore) CreateExercise(arg0 context.Context, arg1 db.CreateExerciseParams) (db.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExercise", arg0, arg1)
	ret0, _ := ret[0].(db.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExercise indicates an expected call of CreateExercise.
func (mr *MockStoreMockRecorder) CreateExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExercise", reflect.TypeOf((*MockStore)(nil).CreateExercise), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateWorkout mocks base method.
func (m *MockStore) CreateWorkout(arg0 context.Context, arg1 db.CreateWorkoutParams) (db.Workout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkout", arg0, arg1)
	ret0, _ := ret[0].(db.Workout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkout indicates an expected call of CreateWorkout.
func (mr *MockStoreMockRecorder) CreateWorkout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkout", reflect.TypeOf((*MockStore)(nil).CreateWorkout), arg0, arg1)
}

// DeleteExercise mocks base method.
func (m *MockStore) DeleteExercise(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExercise", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExercise indicates an expected call of DeleteExercise.
func (mr *MockStoreMockRecorder) DeleteExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExercise", reflect.TypeOf((*MockStore)(nil).DeleteExercise), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteWorkout mocks base method.
func (m *MockStore) DeleteWorkout(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkout indicates an expected call of DeleteWorkout.
func (mr *MockStoreMockRecorder) DeleteWorkout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkout", reflect.TypeOf((*MockStore)(nil).DeleteWorkout), arg0, arg1)
}

// DeleteWorkoutJunction mocks base method.
func (m *MockStore) DeleteWorkoutJunction(arg0 context.Context, arg1 db.DeleteWorkoutJunctionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkoutJunction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkoutJunction indicates an expected call of DeleteWorkoutJunction.
func (mr *MockStoreMockRecorder) DeleteWorkoutJunction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkoutJunction", reflect.TypeOf((*MockStore)(nil).DeleteWorkoutJunction), arg0, arg1)
}

// GatherExercises mocks base method.
func (m *MockStore) GatherExercises(arg0 context.Context, arg1 int32) ([]db.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatherExercises", arg0, arg1)
	ret0, _ := ret[0].([]db.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GatherExercises indicates an expected call of GatherExercises.
func (mr *MockStoreMockRecorder) GatherExercises(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatherExercises", reflect.TypeOf((*MockStore)(nil).GatherExercises), arg0, arg1)
}

// GetExerWorkJunc mocks base method.
func (m *MockStore) GetExerWorkJunc(arg0 context.Context, arg1 db.GetExerWorkJuncParams) ([]db.GetExerWorkJuncRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExerWorkJunc", arg0, arg1)
	ret0, _ := ret[0].([]db.GetExerWorkJuncRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExerWorkJunc indicates an expected call of GetExerWorkJunc.
func (mr *MockStoreMockRecorder) GetExerWorkJunc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExerWorkJunc", reflect.TypeOf((*MockStore)(nil).GetExerWorkJunc), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int32) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetWorkoutName mocks base method.
func (m *MockStore) GetWorkoutName(arg0 context.Context, arg1 db.GetWorkoutNameParams) (db.Workout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkoutName", arg0, arg1)
	ret0, _ := ret[0].(db.Workout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkoutName indicates an expected call of GetWorkoutName.
func (mr *MockStoreMockRecorder) GetWorkoutName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkoutName", reflect.TypeOf((*MockStore)(nil).GetWorkoutName), arg0, arg1)
}

// GetWorkouts mocks base method.
func (m *MockStore) GetWorkouts(arg0 context.Context, arg1 int32) ([]db.Workout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkouts", arg0, arg1)
	ret0, _ := ret[0].([]db.Workout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkouts indicates an expected call of GetWorkouts.
func (mr *MockStoreMockRecorder) GetWorkouts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkouts", reflect.TypeOf((*MockStore)(nil).GetWorkouts), arg0, arg1)
}

// InsertNewWorkJunc mocks base method.
func (m *MockStore) InsertNewWorkJunc(arg0 context.Context, arg1 db.InsertNewWorkJuncParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewWorkJunc", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewWorkJunc indicates an expected call of InsertNewWorkJunc.
func (mr *MockStoreMockRecorder) InsertNewWorkJunc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewWorkJunc", reflect.TypeOf((*MockStore)(nil).InsertNewWorkJunc), arg0, arg1)
}

// RemoveOldWorkJunc mocks base method.
func (m *MockStore) RemoveOldWorkJunc(arg0 context.Context, arg1 db.RemoveOldWorkJuncParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOldWorkJunc", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOldWorkJunc indicates an expected call of RemoveOldWorkJunc.
func (mr *MockStoreMockRecorder) RemoveOldWorkJunc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOldWorkJunc", reflect.TypeOf((*MockStore)(nil).RemoveOldWorkJunc), arg0, arg1)
}

// UpdateExercise mocks base method.
func (m *MockStore) UpdateExercise(arg0 context.Context, arg1 db.UpdateExerciseParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExercise", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExercise indicates an expected call of UpdateExercise.
func (mr *MockStoreMockRecorder) UpdateExercise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExercise", reflect.TypeOf((*MockStore)(nil).UpdateExercise), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateWorkout mocks base method.
func (m *MockStore) UpdateWorkout(arg0 context.Context, arg1 db.UpdateWorkoutParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkout indicates an expected call of UpdateWorkout.
func (mr *MockStoreMockRecorder) UpdateWorkout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkout", reflect.TypeOf((*MockStore)(nil).UpdateWorkout), arg0, arg1)
}
